리터럴
  리터럴(literal)은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 방식을 말한다.

// 숫자 리터럴 3
3

자바스크립트로 아라비아숫자 3을 썼습니다.
아라비아 숫자 3은 단순한 숫자가 아닙니다.
자바스크립트에 의해 평가되어질 코드라는 이야기 입니다.
이때 아라비아숫자 3으로 코드를 쓰면 자바스크립트 엔진이 이 코드를 실행할 때
아라비아숫자 기호를 읽고 숫자값 3이라는 것을 만듭니다.

우리가 파일에 3이라고 기입을 했습니다.
지금 실행되어있지 않았다고 했을 때 아직 값으로 평가되어 있지 않아서
그냥 순수한 텍스트 파일의 문자일 뿐입니다.
당연히 개발자가 기입한 문자겠죠.
이 상태를 리터럴이라고 한단 말이죠.
그런데 리터럴은 무엇때문에 만들었냐면
값을 생성하기 위한 것입니다.
3이라고 우리가 자바스크립트 코드에 쓰면 무엇을 기대하고 쓴것이냐면
자바스크립트엔진이 숫자값을 3을 생성해주기를 기대하고 썼단 이야기죠.
리터럴은요. 평가되어져서 값을 생성하는 문자로 기술된 코드라고 이야기할 수 있습니다.
리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호로 이루어져 있습니다.
아까 살펴본것은 우리가 익히 알고있는 아라비아숫자로 숫자값을 생성하는 예제였는데
숫자가 이외에 다양한 데이터타입의 값들을 만들어낼 수 있습니다.

데이터 타입은 값의 종류라고 말씀들였었어요.
즉 여러가지 종류의 값들을 만들어내는 다양한 리터럴표기법이 있다는 이야기 입니다.

// 정수 리터럴
100

// 부동 소수점 리터럴
10.5

// 2진수 리터럴(0b로 시작)
0b1000001

// 8진수 리터럴(Es6에서 도입, 0o로 시작)
0o101

// 16진수 리터럴(Es6에서 도입, 0x로 시작)
0x41
  
// 문자열 리터럴
'Hello'
"World"

// 불리언 리터럴
true
false

// null 리터럴
null

// undefined 리터럴
undefined

// 객체 리터럴
{name: 'Lee', address: 'Seoul'}

// 배열 리터럴
[1, 2, 3]

// 함수 리터럴
function() {}

// 정규표현식 리터럴
/[A-Z]+/g
